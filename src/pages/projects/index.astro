---
import { getCollection } from "astro:content";
import BaseLayout from "../../layout/BaseLayout.astro";
import type {
    ProjectWithTimeRange,
    YearBucket,
} from "../../types/project.type";
import YearBuckets from "../../components/YearBuckets.svelte";
import { PROJECTS_DESCRIPTION } from "../../consts";

const formatTimeRange = (start: Date, end?: Date): string => {
    const formatDate = (date: Date) =>
        date.toLocaleDateString("en-US", { month: "long", year: "numeric" });

    if (!end) return `${formatDate(start)} - ongoing`;
    if (
        start.getFullYear() === end.getFullYear() &&
        start.getMonth() === end.getMonth()
    ) {
        return formatDate(start);
    }
    return `${formatDate(start)} - ${formatDate(end)}`;
};

const getYearBuckets = async (): Promise<YearBucket[]> => {
    const projects = (await getCollection("projects"))
        .filter((p) => p.data.is_published)
        .sort(
            (a, b) => b.data.start_date.valueOf() - a.data.start_date.valueOf(),
        );

    const projectsWithTimeRange: ProjectWithTimeRange[] = projects.map(
        (project) => ({
            ...project,
            timeRange: formatTimeRange(
                project.data.start_date,
                project.data.end_date,
            ),
        }),
    );

    const yearBuckets = new Map<number, ProjectWithTimeRange[]>();

    for (const project of projectsWithTimeRange) {
        const bucketYear = project.data.end_date
            ? project.data.end_date.getFullYear()
            : project.data.start_date.getFullYear();

        if (!yearBuckets.has(bucketYear)) {
            yearBuckets.set(bucketYear, []);
        }

        yearBuckets.get(bucketYear)!.push(project);
    }

    return Array.from(yearBuckets.entries())
        .map(([year, projects]) => ({
            year,
            projects: projects.sort(
                (a, b) =>
                    b.data.start_date.valueOf() - a.data.start_date.valueOf(),
            ),
        }))
        .sort((a, b) => b.year - a.year);
};

const yearBuckets = await getYearBuckets();
---

<BaseLayout title={`lm04/projects`} description={PROJECTS_DESCRIPTION}>
    <h1 class={`sr-only`}>lm04/projects</h1>

    <YearBuckets client:load {yearBuckets} />
</BaseLayout>
